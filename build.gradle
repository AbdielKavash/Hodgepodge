buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name = "sponge"
        url = "http://repo.spongepowered.org/maven/"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'forge'

version = "1.0"
group= "com.mitchej123.hodgepodge" 
archivesBaseName = "hodgepodge"
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    mappings = "stable_12"
}

configurations {
    // configuration that holds jars to include in the jar
    shade
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + "mixins.hodgepodge.refmap.json"


dependencies {
    //noinspection GroovyAssignabilityCheck
    shade implementation('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
}


jar {
    appendix = minecraft.version

    from refMap
    configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
        from (zipTree(artifact))
    }

    manifest.attributes(
        "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
        "MixinConfigs": "mixins.hodgepodge.json",
        "ForceLoadAsMod": true,
        "MixinCompatibilityLevel": "JAVA_8",
        "FMLCorePluginContainsFMLMod": "true",
        "FMLAT": "hodgepodge_at.cfg"
    )
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand (
            'version':project.version,
            'mcversion':project.minecraft.version
        )
    }
        
    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"]
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
        ext.refMap = "mixins.hodgepodge.refmap.json"
    }
}

idea { module { inheritOutputDirs = true } }
